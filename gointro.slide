What you should know about Go
A brief introduction

Chun Liu

5 Mar 2018

* Agenda
- What is Go? - a brief history
- Why Go? - the major difference 
- Where and when to use Go? - usage scenarios

* What is Go?
.image images/gopher.jpg _ 400
.caption The gopher

* A Programming Language
.play code/slowfib/slowfib.go

* With features
- Compiled to machine code
- Statically typed with type inference 
.play code/types/types.go /START OMIT/,/END OMIT/
- Garbage collected
- CSP based concurrency
- Excellent standard library
- Great tools

* Developed at Google and open source
- Conceived in Sept 2007 by Robert Griesemer, Rob Pike and Ken Thompson
.image images/GPT.png _ 512
.caption From left: Robert Griesemer, Rob Pike and Ken Thompson. _Picture_from_internet_.
- Officially announced in Nov 2009
- Go 1 released in Mar 2012
- Go 1.10 released in Feb 2017

* Influenced by many other programming languages
.image images/The-Origins-of-Go.png _ 650
.caption The Origin of Go. _From_ [[https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/][_The_Go_Programming_Language_]]

* Why Go?

    The properties Go does have address the issues that make large-scale software development 
    difficult.
    -- Rob Pike 

* Go was designed to solve (Google's) problems
- Slow builds
- Uncontrolled dependencies
- Each programmer using a different subset of the language
- Poor program understanding (documentation, etc.)
- Duplication of effort
- Cost of updates
- Cross-language builds

* With the philosophy
*Simplicity*

- Lightweight syntax
- One way to write a piece of code and minimize programmer's effort
- One style to keep the consistance 

*Orthogonality*

- Methods can be implemented for any type
- Structures represent data
- Interfaces represent abstraction


* Clean syntax and light keywords
- 25 keywords (vs 80 keywords in C#)
- Basic types
    bool
    string
    int  int8  int16  int32  int64
    uint uint8 uint16 uint32 uint64 uintptr
    byte // alias for uint8
    rune // alias for int32, represents a Unicode code point
    float32 float64
    complex64 complex128
- Array, slice, struct, map
- Pointer
- Interface
- Function
- Channel

* Only one looping construct
- for
    for i := 0; i < 10; i++ { sum += i }
- "while"
	for sum < 10 { sum += 1 }
- "do-while"
    for {
        sum += 1
        if sum > 10 { break }
    }
- "foreach"
    for i, v := range collection { 
        fmt.Println("The value of index %d is %d", i, v)
    }

* Packages and imports: the key of fast compiling
- Packages are like modules and namespace in C# but lightweight.
- Hoisting dependencies. 
- Unused dependencies cause error at compile time.
- No circular imports
.play code/packages/packages.go

* Radical simplicity
- No inheritance
- No constructors/destructors
- No generics
- No exceptions
- No implicit numeric conversions
- No operator overloading
- And many features which are available in other programming languages

* Not usual OOP - composition, not inheritance
If C++ and Java are about type hierarchies and the taxonomy of types, Go is about composition. - Rob Pike
.code code/composition/composition.go /composed start OMIT/,/composed end OMIT/
.play code/composition/composition.go /main start OMIT/,/main end OMIT/

* Methods can be implemented for any type
.code code/composition/composition.go /method start OMIT/,/method end OMIT/

	f := MyFloat(-math.Sqrt2)
	fmt.Printf("The Abs of %f is %f\n", -math.Sqrt2, f.Abs())
	v := &Vertex{10, 10}
	fmt.Printf("The Abs of %+v is %f", v, v.Abs())

* Interface 

* Concurrency 

* Error handling

* Where and when to use Go

* Go 2017 survey result
.image images/go-survey-2017.png _ 750
.caption _According_to_ [[https://blog.golang.org/survey2017-results][_Go_2017_Survey_Results_]]

* Use cases
- Kubernetes
