What you should know about Go
A brief introduction

Chun Liu
Senior Consultant, Apps Domain, Microsoft
https://github.com/chunliu 

23 Mar 2018

* Agenda
- What is Go? - a brief history
- Why Go? - the major difference 
- Where and when to use Go? - how others use Go

* What is Go?
.image images/gopher.jpg _ 400
.caption The gopher

* A Programming Language
.play code/slowfib/slowfib.go

* With features
- Compiled to machine code
- Statically typed with type inference 
.play code/types/types.go /START OMIT/,/END OMIT/
- Garbage collected
- Communicating Sequential Processes (CSP) style concurrency
- Excellent standard library
- Great tools

* Developed by Google and open source
- Conceived in Sept 2007 by Robert Griesemer, Rob Pike and Ken Thompson
.image images/GPT.png _ 512
.caption From left: Robert Griesemer, Rob Pike and Ken Thompson. _Picture_from_internet_.
- Officially announced in Nov 2009
- Go 1 released in Mar 2012
- Go 1.10 released in Feb 2018

* Influenced by many other programming languages
.image images/The-Origins-of-Go.png _ 550
.caption The Origin of Go. _From_ [[https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/][_The_Go_Programming_Language_]]
The task of the programming language designer *"is*consolidation*not*innovation"*. (Tony Hoare, the author of CSP, 1973).

* Why Go?
.image images/most-loved-wanted-2018.png 330 _
.caption *Most*Loved* vs. *Most*Wanted*. _Based_On_ [[https://insights.stackoverflow.com/survey/2018/#most-loved-dreaded-and-wanted][_Stack_Overflow_Developer_Survey_Result_2018_]]
Go is developed by Google!

* Go was designed to solve (Google's) problems
- Slow builds
- Uncontrolled dependencies
- Each programmer using a different subset of the language
- Poor program understanding (documentation, etc.)
- Duplication of effort
- Cost of updates
- Cross-language builds

* With the philosophy
*Simplicity*

- Lightweight syntax
- One way to write a piece of code and minimize programmer's effort
- One style (gofmt) to keep the consistance 

*Orthogonality*

- Methods can be implemented for any type
- Structures represent data
- Interfaces represent abstraction

* Clean syntax and light keywords
- 25 keywords (vs 80 keywords in C#)
- Basic types - [[https://golang.org/pkg/builtin/]]
    bool
    string
    int  int8  int16  int32  int64
    uint uint8 uint16 uint32 uint64 uintptr
    byte // alias for uint8
    rune // alias for int32, represents a Unicode code point
    float32 float64
    complex64 complex128
- Array, slice, struct, map
- Pointer
- Interface
- Function
- Channel

* Only one looping construct
- for
    for i := 0; i < 10; i++ { sum += i }
- "while"
	for sum < 10 { sum += 1 }
- "do-while"
    for {
        sum += 1
        if sum > 10 { break }
    }
- "foreach"
    for i, v := range collection { 
        fmt.Println("The value of index %d is %d", i, v)
    }

* Packages and imports: the key of fast compiling
- Packages are like modules and namespace in C# but lightweight.
- Hoisting dependencies. 
- Unused dependencies cause error at compile time.
- No circular imports
.play -edit code/packages/packages.go

* Radical simplicity
- No inheritance
- No constructors/destructors
- No generics
- No exceptions
- No implicit numeric conversions
- No operator overloading
- And no many features which are available in other programming languages

* Not usual OOP - composition, not inheritance
If C++ and Java are about type hierarchies and the taxonomy of types, Go is about composition. -- Rob Pike
.play -edit code/composition/composition.go /type Point/,/main end OMIT/

* Methods can be implemented for any type
.code code/interfaces/interfaces.go /method start OMIT/,/method end OMIT/

	f := MyFloat(-math.Sqrt2)
	fmt.Printf("The Abs of %f is %f\n", -math.Sqrt2, f.Abs())
	v := &Vertex{10, 10}
	fmt.Printf("The Abs of %+v is %f", v, v.Abs())

* Interface: all magic happens here
- Interface is implemented implicitly
.code code/interfaces/interfaces.go /interface start OMIT/,/interface end OMIT/
.play code/interfaces/interfaces.go /func main/,/^}/

* Interface (cont.)
- Interface can be embedded

    package io

    type Reader interface {
        Read(p []byte) (n int, err error)
    }
    type Writer interface {
        Write(p []byte) (n int, err error)
    }
    type ReadWriter interface {
        Reader
        Writer
    }

    // equivalent 
    type ReadWriter interface {
        Read(p []byte) (n int, err error)
        Write(p []byte) (n int, err error)
    }

* Interface (cont.)
- Type assertion and type switch
.play code/typeasserts/typeasserts.go /func do/,/do OMIT/

* Error handling
We believe that coupling exceptions to a control structure, as in the try-catch-finally idiom, results in convoluted code. -- go faq 
.play -edit code/errors/errors.go /type Vertex/,/code end OMIT/

* Concurrency: goroutines and channels
.play code/concurrency/concur1.go /func main/,/^}/

* Concurrency (cont.)
.play code/concurrency/concur3.go /func fib/,/file end OMIT/

* C# equivalent
    async Task<int> fib(int x)
    {
        return await Task.Run(() => {
            var (a, b) = (0, 1);
            for(int i = 0; i < x; i++) 
            {
                (a, b) = (b, a + b);
            }
            return a;
        });
    }

    async Task calcFib()
    {
        for(int i = 0; i < 10; i++)
        {
            var n = await fib(10);
            Console.WriteLine(n);
        }
    }

* Some drawbacks

    Go's purpose is not research into programming language design. Go's purpose is to make its 
    designers' programming lives better. -- Rob Pike

- Error handling
    result or error? 2 returns but only one is useful. 
- Dependency management
    go get --> godep --> vendor experiment --> dep (Go 1.9) --> vgo (coming...)
- No Generics. But Go has map, and you just can't create something like it.
    ages := make(map[string]int)
    graph := make(map[string]map[string]int)

    go faq recogize generics since 2012, and it could come in Go 2.

- Once interface{}, no static type check anymore
    The only way to have dynamically dispatched methods is through an interface. -- go faq

* Where and when Go can be used
.image images/go-survey-2017.png _ 750
.caption _According_to_ [[https://blog.golang.org/survey2017-results][_Go_2017_Survey_Results_]]

* Some famous Go projects
- Container: [[https://github.com/docker/swarm][docker swarm]], [[https://github.com/kubernetes/kubernetes][kubernetes]]
- Blockchain: [[https://github.com/ethereum/go-ethereum][go-ethereum]]
- Microservices: [[https://github.com/istio/istio][istio]]
- System tools: [[https://github.com/yudai/gotty][gotty]], [[https://github.com/inconshreveable/ngrok][ngrok]]
- Middleware: [[https://grpc.io/][GRPC]], [[https://github.com/CodisLabs/codis][codis]]

* Go is impressingly adopted in the following areas
- Cloud infra, system and server software
- Microservices and containers
- Web services / APIs
- Command line interface (CLI)

* Microsoft and Go
- MS ships the best code editor for Go
.image images/best-editor.png 256 _
.caption _According_to_ [[https://blog.golang.org/survey2017-results][_Go_2017_Survey_Results_]]

- Azure SDK for Go
- Go tooling for Azure App Service has been retired, but Go app still can be deployed as a Linux container for Web App
- Go app can be deployed as a container via AKS

* Resources
- [[https://tour.golang.org/welcome/1][A Tour of Go]]
- [[https://blog.golang.org/survey2017-results][Go 2017 Survey Results]]
- [[https://talks.golang.org/][Go talks]]
- This slide: [[https://github.com/chunliu/gointro]]
